<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日本机器人学术线上发表</title>
      <link href="2021/09/14/ri-ben-ji-qi-ren-xue-hui-fa-biao-2021-9/"/>
      <url>2021/09/14/ri-ben-ji-qi-ren-xue-hui-fa-biao-2021-9/</url>
      
        <content type="html"><![CDATA[<h1 id="2021日本机器人学术公演会发表视频（线上发表）"><a href="#2021日本机器人学术公演会发表视频（线上发表）" class="headerlink" title="2021日本机器人学术公演会发表视频（线上发表）"></a>2021日本机器人学术公演会发表视频（线上发表）</h1><ul><li>与2021年9月8号（周三）到~11号（周六）举行线上日本机器人学术公演会，目的是希望日本的各个大学，以及研究机构和公司，能在本次交流会上探讨学术的可能性，以及技术交流。我与2021年9月11日上午进行了发表，课题是与机器学习的数据集制作有关，本视频上传到B站上，通过嵌入代码连接到本博客上，点击视频的播放键就可以播放了，谢谢啦。</li></ul><iframe width="560" height="700 " src="//player.bilibili.com/player.html?aid=890478232&amp;bvid=BV1zP4y1Y7gT&amp;cid=407676937&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="下面是本次学术交流会我所发表那天的海报"><a href="#下面是本次学术交流会我所发表那天的海报" class="headerlink" title="下面是本次学术交流会我所发表那天的海报"></a>下面是本次学术交流会我所发表那天的海报</h1><p><img src="https://user-images.githubusercontent.com/50350039/133247758-22339356-fd5f-45d9-ad39-8de6ff45e593.png" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 线上发表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV5 简单的理解和迁移学习的思路  (1)</title>
      <link href="2021/05/27/yolov5/"/>
      <url>2021/05/27/yolov5/</url>
      
        <content type="html"><![CDATA[<h1 id="YOLOV5-简单的理解和迁移学习的思路-1"><a href="#YOLOV5-简单的理解和迁移学习的思路-1" class="headerlink" title="YOLOV5 简单的理解和迁移学习的思路  (1)"></a>YOLOV5 简单的理解和迁移学习的思路  (1)</h1><ul><li><h3 id="这是我日常学校每周报告会发表的内容，所以想记录一下，以下就是把制作好的PPT上传而已-，所以不是中文"><a href="#这是我日常学校每周报告会发表的内容，所以想记录一下，以下就是把制作好的PPT上传而已-，所以不是中文" class="headerlink" title="这是我日常学校每周报告会发表的内容，所以想记录一下，以下就是把制作好的PPT上传而已 ，所以不是中文"></a>这是我日常学校每周报告会发表的内容，所以想记录一下，以下就是把制作好的PPT上传而已 ，所以不是中文</h3></li><li><h3 id="The-structure-of-YOLOV5"><a href="#The-structure-of-YOLOV5" class="headerlink" title="The structure of YOLOV5"></a>The structure of YOLOV5</h3><p><img src="https://user-images.githubusercontent.com/50350039/119788546-30d9eb00-bf0d-11eb-94e4-98ab6d5e64be.png" alt="image"></p><hr><h4 id="The-structure-of-Yolov5-uses-a-single-stage-detection-structure-The-structure-diagram-is-shown-in-the-figure-above-It-is-mainly-divided-into-five-stages"><a href="#The-structure-of-Yolov5-uses-a-single-stage-detection-structure-The-structure-diagram-is-shown-in-the-figure-above-It-is-mainly-divided-into-five-stages" class="headerlink" title="The structure of Yolov5 uses a single-stage detection structure. The structure diagram is shown in the figure above. It is mainly divided into five stages:"></a>The structure of Yolov5 uses a single-stage detection structure. The structure diagram is shown in the figure above. It is mainly divided into five stages:</h4><hr><ol><li><h3 id="Input-Image-input-terminal-and-data-processing-Mosaic-Cutout-matrix-training"><a href="#Input-Image-input-terminal-and-data-processing-Mosaic-Cutout-matrix-training" class="headerlink" title="Input: Image input terminal and data processing. Mosaic, Cutout, matrix training."></a>Input: Image input terminal and data processing. Mosaic, Cutout, matrix training.</h3></li><li><h3 id="Backbone-Extract-the-features-of-high-middle-and-low-layers-using-CSP-Fcous-Leaky-ReLU-etc"><a href="#Backbone-Extract-the-features-of-high-middle-and-low-layers-using-CSP-Fcous-Leaky-ReLU-etc" class="headerlink" title="Backbone: Extract the features of high, middle and low layers, using CSP, Fcous, Leaky ReLU, etc."></a>Backbone: Extract the features of high, middle and low layers, using CSP, Fcous, Leaky ReLU, etc.</h3></li><li><h3 id="Neck-Fusion-of-features-at-various-levels-to-extract-large-medium-and-small-feature-maps"><a href="#Neck-Fusion-of-features-at-various-levels-to-extract-large-medium-and-small-feature-maps" class="headerlink" title="Neck: Fusion of features at various levels to extract large, medium and small feature maps."></a>Neck: Fusion of features at various levels to extract large, medium and small feature maps.</h3></li><li><h3 id="Head-Perform-the-final-detection-part-apply-the-anchor-box-on-the-feature-map-and-generate-the-final-output-vector-with-class-probability-object-score-and-bounding-box"><a href="#Head-Perform-the-final-detection-part-apply-the-anchor-box-on-the-feature-map-and-generate-the-final-output-vector-with-class-probability-object-score-and-bounding-box" class="headerlink" title="Head: Perform the final detection part, apply the anchor box on the feature map, and generate the final output vector with class probability, object score and bounding box."></a>Head: Perform the final detection part, apply the anchor box on the feature map, and generate the final output vector with class probability, object score and bounding box.</h3></li><li><h3 id="Loss-Calculate-the-Loss-of-the-prediction-result-and-ground-truth-and-back-propagate-to-update-the-parameters-of-the-model"><a href="#Loss-Calculate-the-Loss-of-the-prediction-result-and-ground-truth-and-back-propagate-to-update-the-parameters-of-the-model" class="headerlink" title="Loss: Calculate the Loss of the prediction result and ground truth, and back-propagate to update the parameters of the model."></a>Loss: Calculate the Loss of the prediction result and ground truth, and back-propagate to update the parameters of the model.</h3></li></ol><hr></li></ul><ul><li><h3 id="Yolov5-five-models"><a href="#Yolov5-five-models" class="headerlink" title="Yolov5 five models"></a>Yolov5 five models</h3></li></ul><p><img src="https://user-images.githubusercontent.com/50350039/119789768-50bdde80-bf0e-11eb-9342-ae9580120805.png" alt="image"></p><ul><li><h3 id="Yolov5-integrates-a-large-number-of-State-of-the-art-in-the-field-of-target-detection-at-various-stages-and-its-code-structure-is-as-follows"><a href="#Yolov5-integrates-a-large-number-of-State-of-the-art-in-the-field-of-target-detection-at-various-stages-and-its-code-structure-is-as-follows" class="headerlink" title="Yolov5 integrates a large number of State-of-the-art in the field of target detection at various stages, and its code structure is as follows:"></a>Yolov5 integrates a large number of State-of-the-art in the field of target detection at various stages, and its code structure is as follows:</h3><p><img src="https://user-images.githubusercontent.com/50350039/119792411-a1ced200-bf10-11eb-9cfe-9353f88a3c5c.png" alt="image"></p></li><li><h3 id="how-to-freeze-YOLOv5-layers-when-transfer-learning"><a href="#how-to-freeze-YOLOv5-layers-when-transfer-learning" class="headerlink" title="how to freeze YOLOv5  layers when transfer learning"></a>how to <strong>freeze</strong> YOLOv5  layers when <strong>transfer learning</strong></h3><ul><li><h3 id="Fix-the-backbone"><a href="#Fix-the-backbone" class="headerlink" title="Fix the backbone"></a>Fix the backbone</h3></li></ul><h3 id="Fix-the-weight-of-the-YOLOV5-model-so-that-it-dose-not-change-during-transfer-learning"><a href="#Fix-the-weight-of-the-YOLOV5-model-so-that-it-dose-not-change-during-transfer-learning" class="headerlink" title="Fix the weight of the YOLOV5 model so that it dose not change during transfer learning."></a>Fix the weight of the YOLOV5 model so that it dose not change during transfer learning.</h3><h3 id="I-refer-to-this-article-for-reference-here-1-Transfer-Learing-with-Frozen-Layers"><a href="#I-refer-to-this-article-for-reference-here-1-Transfer-Learing-with-Frozen-Layers" class="headerlink" title="I refer to this article for reference here   [1] Transfer Learing with Frozen Layers"></a>I refer to this article for reference here   [1] <a href="https://github.com/ultralytics/yolov5/issues/1314">Transfer Learing with Frozen Layers</a></h3><h3 id="Look-at-a-file-with-yolov5-models-yolov5s-yaml-we-can-see-that-the-first-10-layers-are-the-backbone-that-extract-the-features"><a href="#Look-at-a-file-with-yolov5-models-yolov5s-yaml-we-can-see-that-the-first-10-layers-are-the-backbone-that-extract-the-features" class="headerlink" title="Look at a file with  yolov5/models/yolov5s.yaml . we can see that the first 10 layers are the backbone that extract the features."></a>Look at a file with  yolov5/models/yolov5s.yaml . we can see that the first 10 layers are the backbone that extract the features.</h3><pre class="line-numbers language-none"><code class="language-none"># YOLOv5 backbone  backbone:    # [from, number, module, args]    [[-1, 1, Focus, [64, 3]],  # 0-P1/2     [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4     [-1, 3, BottleneckCSP, [128]],     [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8     [-1, 9, BottleneckCSP, [256]],     [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16     [-1, 9, BottleneckCSP, [512]],     [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32     [-1, 1, SPP, [1024, [5, 9, 13]]],     [-1, 3, BottleneckCSP, [1024, False]],  # 9    ]    # YOLOv5 head  head:    [[-1, 1, Conv, [512, 1, 1]],     [-1, 1, nn.Upsample, [None, 2, 'nearest']],     [[-1, 6], 1, Concat, [1]],  # cat backbone P4     [-1, 3, BottleneckCSP, [512, False]],  # 13       [-1, 1, Conv, [256, 1, 1]],     [-1, 1, nn.Upsample, [None, 2, 'nearest']],     [[-1, 4], 1, Concat, [1]],  # cat backbone P3     [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3/8-small)       [-1, 1, Conv, [256, 3, 2]],     [[-1, 14], 1, Concat, [1]],  # cat head P4     [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4/16-medium)       [-1, 1, Conv, [512, 3, 2]],     [[-1, 10], 1, Concat, [1]],  # cat head P5     [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5/32-large)       [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)    ] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><h3 id="Fix-this-10-layer-method-in-yolov5-train-py"><a href="#Fix-this-10-layer-method-in-yolov5-train-py" class="headerlink" title="Fix this 10 layer method in yolov5/train.py"></a>Fix this 10 layer method in yolov5/train.py</h3><pre class="line-numbers language-none"><code class="language-none"># Freezefreeze = []  # parameter names to freeze (full or partial)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><h3 id="change-this-to"><a href="#change-this-to" class="headerlink" title="change this to:"></a>change this to:</h3><pre class="line-numbers language-none"><code class="language-none">freeze = ['model.%s.' % x for x in range(10)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="This-alone-will-lock-the-weights-of-the-first-10-layers-and-will-not-change-during-training"><a href="#This-alone-will-lock-the-weights-of-the-first-10-layers-and-will-not-change-during-training" class="headerlink" title="This alone will lock the weights of the first 10 layers and will not change during training."></a>This alone will lock the weights of the first 10 layers and will not change during training.</h3><h3 id="Next-article「如和使用YOLOV5训练自己的数据——How-to-train-your-data-with-YoloV5-」"><a href="#Next-article「如和使用YOLOV5训练自己的数据——How-to-train-your-data-with-YoloV5-」" class="headerlink" title="Next article「如和使用YOLOV5训练自己的数据——How to train your data with YoloV5 」"></a>Next article「如和使用YOLOV5训练自己的数据——How to train your data with YoloV5 」</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> YOLO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用方法</title>
      <link href="2021/05/15/git-de-yong-fa/"/>
      <url>2021/05/15/git-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="git-简单使用方法"><a href="#git-简单使用方法" class="headerlink" title="git 简单使用方法"></a>git 简单使用方法</h1><ul><li><p>从自己电脑上传代码到github</p></li><li><p><img src="https://img-blog.csdnimg.cn/2021051501291033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="git"></p></li><li><p>代码的追加以及更新,会出现以下错误</p><pre class="line-numbers language-none"><code class="language-none">git push origin mastererror: src refspec master does not match anyerror: failed to push some refs to 'git@github.com:user-name/repository-name.git'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color="#dd0000"><strong>error: src refspec master does not match any</strong></font><br></p></li><li><p>需要做的是，检查是否<font color="#dd0000"><strong>commit</strong></font><br></p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> 文件名<span class="token function">git</span> commit -m <span class="token string">'提交版本信息'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如果做出上述，还是出现了<font color="#dd0000"><strong>error</strong></font><br></p><p>这是因为GIthub的master branch 变成了 main branch</p><p>所以以下代码解决问题</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解決</span><span class="token function">git</span> checkout main<span class="token function">git</span> pull origin main <span class="token comment">#把github的代码pull到本地</span><span class="token function">git</span> push origin main <span class="token comment">#上传自己的新代码文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#dd0000"><strong>更新前</strong></font><br><img src="https://img-blog.csdnimg.cn/20210515023109518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p><font color="#dd0000"><strong>更新后</strong></font><br></p><p><img src="https://img-blog.csdnimg.cn/20210515023124717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p>可以看到，从local电脑里更新到github上的文件</p><ul><li>具体电脑上运行的流程，以及出错的代码如下</li></ul><p><img src="https://img-blog.csdnimg.cn/20210515012937414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10Docker Desktop(WSL2) pull的image等从C盘移植其他盘</title>
      <link href="2021/01/30/win10docker-desktop-wsl2-pull-de-image-deng-cong-c-pan-yi-zhi-qi-ta-pan/"/>
      <url>2021/01/30/win10docker-desktop-wsl2-pull-de-image-deng-cong-c-pan-yi-zhi-qi-ta-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10Docker-Desktop-WSL2-pull的image等从C盘移植其他盘"><a href="#Win10Docker-Desktop-WSL2-pull的image等从C盘移植其他盘" class="headerlink" title="Win10Docker Desktop(WSL2) pull的image等从C盘移植其他盘"></a>Win10Docker Desktop(WSL2) pull的image等从C盘移植其他盘</h1><h2 id="缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择"><a href="#缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择" class="headerlink" title="缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择"></a>缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl -l -v --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210130201404860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li>docker-desktop是存放程序的</li><li>docker-desktop-data是存放镜像的</li></ul><h2 id="Clean-Purge-data-删除镜像-wsl-hyperv"><a href="#Clean-Purge-data-删除镜像-wsl-hyperv" class="headerlink" title="Clean/Purge data  删除镜像 wsl hyperv"></a>Clean/Purge data  删除镜像 wsl hyperv</h2><p><img src="https://img-blog.csdnimg.cn/20210130201625903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><h2 id="打包wsl系统镜像"><a href="#打包wsl系统镜像" class="headerlink" title="打包wsl系统镜像"></a>打包wsl系统镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --export docker-desktop docker-desktop.tar$ wsl --export docker-desktop-data docker-desktop-data.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021013020181257.png"></p><h2 id="解除现有登录的wsl子系统"><a href="#解除现有登录的wsl子系统" class="headerlink" title="解除现有登录的wsl子系统"></a>解除现有登录的wsl子系统</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --unregister docker-desktop$ wsl --unregister docker-desktop-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="把刚刚打包过的系统文件，导入到自己想要的盘下面"><a href="#把刚刚打包过的系统文件，导入到自己想要的盘下面" class="headerlink" title="把刚刚打包过的系统文件，导入到自己想要的盘下面"></a>把刚刚打包过的系统文件，导入到自己想要的盘下面</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --import docker-desktop d:<span class="token punctuation">\</span>your-install-path docker-desktop.tar$ wsl --import docker-desktop-data d:<span class="token punctuation">\</span>your-install-path docker-desktop-data.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021013020214070.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p><strong>这个地方需要注意</strong>，如果把docker-desktop和docker-desktop-data导入到一个文件夹里面会失败，导入到两个名字不同的文件夹里就OK了，然后重启<strong>docker desktop</strong></p></li><li><p><img src="https://img-blog.csdnimg.cn/20210130202401881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><h2 id="Pull一个镜像试一试，看看C盘的存储增不增加"><a href="#Pull一个镜像试一试，看看C盘的存储增不增加" class="headerlink" title="Pull一个镜像试一试，看看C盘的存储增不增加"></a>Pull一个镜像试一试，看看C盘的存储增不增加</h2><p>Pull一个ROS的镜像，大概有两三个G大小<br><img src="https://img-blog.csdnimg.cn/20210130202555124.png"><br>我们先看一下，<strong>F盘</strong>下的存储docker image的地方，存储有没有增加<br><img src="https://img-blog.csdnimg.cn/20210130202924280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210130202936112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210130202945608.png"></p></li><li><p>由上可以见到，F盘随着pull的时间，储存量越来越多，C盘的存储却不会变，<strong>大吉大利，今晚吃鸡！！！！</strong> 嘎嘎嘎</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚马逊白嫖12个月服务器并设置内网穿透</title>
      <link href="2021/01/26/ya-ma-xun-bai-piao-fu-wu-qi-bing-she-zhi-nei-wang-chuan-tou/"/>
      <url>2021/01/26/ya-ma-xun-bai-piao-fu-wu-qi-bing-she-zhi-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="亚马逊白嫖12个月服务器并设置内网穿透"><a href="#亚马逊白嫖12个月服务器并设置内网穿透" class="headerlink" title="亚马逊白嫖12个月服务器并设置内网穿透"></a>亚马逊白嫖12个月服务器并设置内网穿透</h1><ul><li><p>缘由是因为学校研究室的服务器，是隐藏在关西大学<strong>NAT</strong>和<strong>Firewall</strong>的背后，如果没有公开的IP地址是不能访问到研究室的服务器上传文件或者获取文件等等，所以就考虑到Google和AWS等云服务租借服务器的话，每个服务器都会有自己的公有ip地址。而且亚马逊云服务对于<strong>初次</strong>注册账号的用户可以免费使用12个月的服务器，当然啦免费的么，服务器的配置是很低的。内网穿透的原理以及AWS的server如下图所示<img src="https://img-blog.csdnimg.cn/20210124204354864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="内网穿透"></p><p><img src="https://img-blog.csdnimg.cn/20210124204148550.png" alt="AWS免费server"></p></li><li><p>下一步安装Docker，我选的是Ubuntu所以安装的时候选Linux<br>这步是如果之前有过安装docker或者有老版本的docker，那么卸载它</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>    apt-transport-https <span class="token punctuation">\</span>    ca-certificates <span class="token punctuation">\</span>    <span class="token function">curl</span> <span class="token punctuation">\</span>    gnupg-agent <span class="token punctuation">\</span>    software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加docker GPG官方密钥</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> apt-key fingerprint 0EBFCD88pub   rsa4096 <span class="token number">2017</span>-02-22 <span class="token punctuation">[</span>SCEA<span class="token punctuation">]</span>      9DC8 <span class="token number">5822</span> 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88uid           <span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> Docker Release <span class="token punctuation">(</span>CE deb<span class="token punctuation">)</span> <span class="token operator">&lt;</span>docker@docker.com<span class="token operator">&gt;</span>sub   rsa4096 <span class="token number">2017</span>-02-22 <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置存储库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> add-apt-repository <span class="token punctuation">\</span>   <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \   <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \   stable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装docker引擎</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装Docker 可视化工具<strong>Portainer</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker search portainer <span class="token operator">|</span><span class="token function">head</span> -n <span class="token number">3</span>$ docker volume create portainer_data$ docker run -d -p <span class="token number">9000</span>:9000 --name<span class="token operator">=</span>portainer --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer20db26b67b791648c2ef6aee444a5226a9c897ebcf0160050e722dbf4a4906e3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个地方，<strong>http://公网地址:9000</strong><br>如果网页没有打开，或者连接不上那是因为9000的端口没有开放，要去AWS管理台自己的实例的安全群组哪里开放9000端口,设置完之后就应该出现登录页面，第一次需自行设置账户密码。<br><img src="https://img-blog.csdnimg.cn/20210124210103904.png" alt="开放9000端口"><br><img src="https://img-blog.csdnimg.cn/20210124210248142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>下一步Docker hub里找到frps有关的镜像在Portainer里面进行拉取<br><img src="https://img-blog.csdnimg.cn/20210124210649187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="拉取镜像"></li><li>设置参数在Containers里面就会看到AWSserver运行的两个docker 容器</li></ul><p><img src="https://img-blog.csdnimg.cn/20210124210806883.png" alt="docker容器"></p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于renren-fast开发，负载均衡缺少pom文件大坑</title>
      <link href="2021/01/06/renren-fast/"/>
      <url>2021/01/06/renren-fast/</url>
      
        <content type="html"><![CDATA[<p>@通过网关连接renren-fast时候报的错</p><h1 id="Error-creating-bean-with-name-‘ribbonLoadBalancingHttpClient’"><a href="#Error-creating-bean-with-name-‘ribbonLoadBalancingHttpClient’" class="headerlink" title="Error creating bean with name ‘ribbonLoadBalancingHttpClient’"></a>Error creating bean with name ‘ribbonLoadBalancingHttpClient’</h1><p>通过spring gateway 网关把请求分配给renren-fast的时候出现了以下错误。</p><pre class="line-numbers language-none"><code class="language-none">2021-01-06 22:47:02.793 ERROR 14024 --- [ctor-http-nio-2] a.w.r.e.AbstractErrorWebExceptionHandler : [b41c453c] 500 Server Error for HTTP GET "/api/captcha.jpg?uuid=197cc4fb-3695-43cd-8293-8cf4dc31b91f"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>couse by 1</p><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ribbonLoadBalancer' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Unsatisfied dependency expressed through method 'ribbonLoadBalancer' parameter 2; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ribbonServerListFilter' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.loadbalancer.ServerListFilter]: Factory method 'ribbonServerListFilter' threw exception; nested exception is java.lang.NoClassDefFoundError: com/netflix/servo/monitor/Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>couse by 2</p><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ribbonServerListFilter' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.loadbalancer.ServerListFilter]: Factory method 'ribbonServerListFilter' threw exception; nested exception is java.lang.NoClassDefFoundError: com/netflix/servo/monitor/Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210106222317765.png">根本没有这个东西</p><p>所以参考<br>链接: <a href="https://www.cnblogs.com/ye-feng-yu/p/11106006.html">link</a>.的博客gateway ribbon 负载均衡这块，发现自己的pom文件里没有如下依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个加上，重新reload Maven 重跑gateway<br><img src="https://img-blog.csdnimg.cn/2021010700364017.png"><br>原先获取图片的地方由500 变成了 200  成功了 </p>]]></content>
      
      
      <categories>
          
          <category> renren-fast </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL编码问题的坑</title>
      <link href="2020/12/08/mysql-bian-ma-de-keng/"/>
      <url>2020/12/08/mysql-bian-ma-de-keng/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL编码问题的坑"><a href="#MySQL编码问题的坑" class="headerlink" title="MySQL编码问题的坑"></a>MySQL编码问题的坑</h1><ul><li>缘由通过前端页码往后端post请求数据更改，中文出现“？？？”的问题<img src="https://img-blog.csdnimg.cn/20210123192905122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></li><li>进入docker MySQL的交互容器内</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker <span class="token builtin class-name">exec</span> -it mysql /bin/bash$ mysql -u root -p<span class="token comment"># 查看编码方式</span>$ show variables like <span class="token string">'character\_set\_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img-blog.csdnimg.cn/20210123194719226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2021012401044694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="service mysqld restart"></p><p>储存的中文数据什么也显示不出来，大部分都为latin1，猜想可能这块有问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ SET character_set_client <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_connection <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_database <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_results <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_server <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重新查看MySQL的编码形式，然而并没有卵用，MySQL依旧是打不死的小强，无论你你怎么能他依然latin1屹立不倒</p><ul><li><strong>所以要找到MySQL的my.cof配置文件的位置，对配置文件进行改动</strong><br>如下面代码所示，我认为这个是中文不出现乱码的最好的配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">init_connect</span><span class="token operator">=</span>’SET collation_connection <span class="token operator">=</span> utf8_unicode_ci’<span class="token assign-left variable">init_connect</span><span class="token operator">=</span>’SET NAMES utf8’character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我又重启了MySQL，看了一遍编码方式我的天latin1纹丝不动我都要吐血了。</p><p>查阅了很多资料都是废话连篇，千篇一律。</p><p>所以思考是不是配置文件放错地方，导致MySQL根本没有察觉到配置文件的存在，在这里我要说一下我的配置文件原先设置的位置是 etc/mysql/my.conf<br>一般配置文件是直接放在etc下面的，所以etc下vim了个my.conf，把utf8的配置粘贴了进去，中心启动MySQL服务器，<br><img src="https://img-blog.csdnimg.cn/20210124024319195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br>清一色utf8，嘎嘎舒服<br>所以说MySQL的my.cnf这个配置文件放的地方<br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>重要的事说三遍</p><p><img src="https://img-blog.csdnimg.cn/20210124024434599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br>前端页码发送post的请求，刷新返回来的数据也显示中文了哈哈。。。。</p><h2 id="一点应该知道的基础知识"><a href="#一点应该知道的基础知识" class="headerlink" title="一点应该知道的基础知识"></a>一点应该知道的基础知识</h2><ul><li>小插曲 如果想查看MySQL的配置文件要到/etc/mysql/my.cnf的地方 cat一下可以看到配置信息，<strong>MySQL配置文件在Windows下叫my.ini，在MySQL的安装根目录下；在Linux下叫my.cnf，该文件位于/etc/my.cnf。</strong></li><li>我们在创建基础容器之后，进入容器，进行编辑配置文件的时候，需要使用vim或者vi命令，但是会出现：这是因为vim没有安装。</li></ul><p>安装vim就好啦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> update$ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="MySQL的基本操作方法"><a href="#MySQL的基本操作方法" class="headerlink" title="MySQL的基本操作方法"></a>MySQL的基本操作方法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql -u root -p$ SHOW DATABASES<span class="token punctuation">;</span>$ USE 数据库名称$ show tables<span class="token punctuation">;</span>$ <span class="token keyword">select</span> * from 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装 NVIDIA Driver，CUDA, cuDNN</title>
      <link href="2020/04/20/ubuntu-an-zhuang/"/>
      <url>2020/04/20/ubuntu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<ul><li>用USB引导盘装好系统以后，选英语语言和英语键盘并且加入字体库命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /usr/lib/locale$ <span class="token function">sudo</span> locale-gen - -purge - -no-archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>下载 NVIDIA  Driver</li></ol><table><thead><tr><th>CUDA Toolkit</th><th>Linux x86_64 Driver Version</th></tr></thead><tbody><tr><td>CUDA 9.2(9.2.88)</td><td>&gt;=396.26</td></tr><tr><td>CUDA 9.2(9.2.148 Update 1)</td><td>&gt;=396.37 &amp;&amp; &lt;410.48</td></tr><tr><td>CUDA 10.1</td><td>&gt;=418.39</td></tr><tr><td>CUDA 10.2.89</td><td>&gt;=440.33</td></tr><tr><td>CUDA 11.0.1 RC</td><td>&gt;=450.36.06</td></tr><tr><td>CUDA 11.0.2 GA</td><td>&gt;=450.51.05</td></tr><tr><td>CUDA 11.0.3 Update 1</td><td>&gt;=450.51.06</td></tr></tbody></table><ol start="2"><li>NVIDIA  Driver 安装</li></ol><p>在google搜索nvidia drivers找到官网，下载驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> purge nvidia*$ <span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential gcc-multilib dkms$ <span class="token function">sudo</span> <span class="token function">touch</span> /etc/modprobe.d/blacklist-nouveau.conf$ <span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist-nouveau.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入<br>blacklist nouveau<br>options nouveau modeset=0<br>进入/etc/default 找到grub文件，在此⻚打开terminal，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gedit grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 GRUB-CMDLINE-LINUX-DEFAULT=“quiet splash“处的splash 后加nomodeset</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> update-initramfs -u $ <span class="token function">sudo</span> update-grub2$ <span class="token builtin class-name">cd</span> ~$ <span class="token builtin class-name">cd</span> /Downloads$ <span class="token function">ls</span> -la$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x NVIDIA-Linux-x86_64-450.57.run $ <span class="token function">sudo</span> ./NVIDIA-Linux-x86_64-450.57.run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装CUDA</li></ol><p>去官网找到相应版本，installer Type选deb(local)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/profile.d/cuda.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/cuda/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDADIR</span><span class="token operator">=</span>/usr/local/cuda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/profile.d/cuda.sh $ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/ld.so.conf.d/cuda.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ldconfig $ <span class="token function">reboot</span>$ nvcc - -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>cuDNN 的安装<br>官方网站下载cudnn</li></ol><ul><li>cuDNN Library for Linux (x86)</li><li>cuDNN Runtime Library for Ubuntu 18.04</li><li>cuDNN Developer Library for Ubuntu 18.04</li><li>cuDNN Code Samples and User Guide for Ubuntu 18.04</li><li>如果双击后在软件仓库安装时出现无法俺从来而情况，可以通过命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i 要解压的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.1 将文件解压并复制到CUDA中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -xzvf cudnn-ooxx.tgz //解压文件，也可手动解压$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda/include$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64$ <span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.2 检验cuDNN是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> -r /usr/src/cudnn_samples_v7/mnistCUDNN <span class="token environment constant">$HOME</span>$ <span class="token builtin class-name">cd</span> <span class="token environment constant">$HOME</span>/cudnn_samples_v7/mnistCUDNN $ <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">make</span>$ ./mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出现了Test passed！ 则安装成功</p><p>如果命令copy过去没有编译成功 可以手动复制过去</p><p><img src="https://img-blog.csdnimg.cn/20210120045448638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210120045501656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker里面导入MySQL</title>
      <link href="2019/12/18/docker-mysql/"/>
      <url>2019/12/18/docker-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-hub"><a href="#docker-hub" class="headerlink" title="docker hub"></a>docker hub</h1><ul><li><p>下载MySQL镜像</p><p><code>sudo docker pull mysql:5.7</code></p></li><li><p>检查下载好的镜像</p><p><code>sudo docker images</code></p></li><li><p>切换root的用户</p><p><code>su root</code></p></li><li><p>启动容器</p><p>docker run -p 3306:3306 –name mysql \</p></li></ul><blockquote><p>-v /mydata/mysql/log:/var/log/mysql <br>-v /mydata/mysql/data:/var/lib/mysql <br>-v /mydata/mysql/conf:/etc/mysql <br>-e MYSQL_ROOT_PASSWORD=root <br>-d mysql:5.7</p></blockquote><pre><code>-p 3306:3306为端口映射</code></pre><p>-v 是目录挂载 具体意思是在本体linux下的/mydata/mysql/log  ：冒号就是与容器内部的/var/log/mysql进行挂载，直白的说容器内部log文件的记录 会直接反应到linux指定目录下，容器内不的日志，linux在外面也能够看到</p><p><img src="https://img-blog.csdnimg.cn/20210120010836980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p>如上图所示，MySQL容器挂载的各个log，数据，配置文件dg在外面root linux里面也是可以访问到的，容器外部对挂载文件直接修改，是可以同步到容器</p><ul><li><p>查看docker运行中的容器</p><p><code>docker ps</code></p></li><li><p>进入MySQL容器内部</p><ul><li><code>docker exec -it docker容器的前三位id\或者容器的名字 /bin/bash</code></li></ul><p><img src="https://img-blog.csdnimg.cn/2021012001085931.png"></p><ul><li>就会发现我们进入容器内部的环境当中，因为每一个容器都是一个小型的linux系统，如上图为哦们已经进入到MySQL容器的内部</li></ul><p><img src="https://img-blog.csdnimg.cn/20210120010917607.png"></p></li></ul><ul><li>查看目录结构会发现，他就是一个完整的一个linux的目录结构</li></ul><p><img src="https://img-blog.csdnimg.cn/20210120011025911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p>查看MySQL装在了那个位置</p><p><code>whereis mysql</code><br><img src="https://img-blog.csdnimg.cn/20210120011051134.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uuUv48u2-1611076069706)(C:\Users\jinue\AppData\Roaming\Typora\typora-user-images\image-20201206041528226.png)]"></p></li><li><p>下图是docker容器文件挂载与端口映射<br><img src="https://img-blog.csdnimg.cn/20210120011126996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p></li></ul><p>访问linux的3306接口也就能够访问到MySQL容器的3306的端口</p><p>cd conf      vi my.cnf</p><ul><li>复制下面配置文件</li></ul><p>[client]</p><p>default-character-set=utf8</p><p>[mysql]</p><p>default-character-set=utf8</p><p>[mysqld]</p><p>init_connect=’SET collation_connection = utf8_unicode_ci’</p><p>init_connect=’SET NAMES utf8’</p><p>character-set-server=utf8</p><p>collation-server=utf8_unicode_ci</p><p>skip-character-set-client-handshake</p><p>skip-name-resolve</p><p><img src="https://img-blog.csdnimg.cn/20210120011245615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p>docker 重启mysql</p><p><code>docker restart mysql</code></p></li></ul><ul><li><p>进入交互模式</p><p><code>docker exec -it mysql /bin/bash</code></p><p>查看linux上配置的文件是否同步到位</p><ul><li>进入MySQL内部查看配置</li><li><code>mysql -u root -p</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
