<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日本机器人学术线上发表</title>
      <link href="2021/09/14/ri-ben-ji-qi-ren-xue-hui-fa-biao-2021-9/"/>
      <url>2021/09/14/ri-ben-ji-qi-ren-xue-hui-fa-biao-2021-9/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年薛经纬进行学术交流视频（线上发表）"><a href="#2021年薛经纬进行学术交流视频（线上发表）" class="headerlink" title="2021年薛经纬进行学术交流视频（线上发表）"></a>2021年薛经纬进行学术交流视频（线上发表）</h1><ul><li>​        2021年9月8日至9月11日，日本机器人协会举行线上机器人学术发表会，目的是让日本的各个大学、以及研究机构和公司开展学术交流。我于2021年9月11日上午进行了发表，题目是《パノプティックセグメンテーションとGMS特徴点を用いて，アノテーションを自動化する方法の提案》。本视频上传到B站上，通过嵌入代码连接到本博客上，点击视频的播放键就可以播放，谢谢啦。请批评指正。</li></ul><iframe width="800" height="700 " src="//player.bilibili.com/player.html?aid=890478232&amp;bvid=BV1zP4y1Y7gT&amp;cid=407676937&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="下面是本次学术交流会海报"><a href="#下面是本次学术交流会海报" class="headerlink" title="下面是本次学术交流会海报"></a>下面是本次学术交流会海报</h1><p><img src="https://user-images.githubusercontent.com/50350039/133247758-22339356-fd5f-45d9-ad39-8de6ff45e593.png" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 线上发表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV5 简单的介绍及基于YOLOV5迁移学习  (1)</title>
      <link href="2021/05/27/yolov5/"/>
      <url>2021/05/27/yolov5/</url>
      
        <content type="html"><![CDATA[<h1 id="YOLOV5-简单的介绍及基于YOLOV5迁移学习-1"><a href="#YOLOV5-简单的介绍及基于YOLOV5迁移学习-1" class="headerlink" title="YOLOV5 简单的介绍及基于YOLOV5迁移学习  (1)"></a>YOLOV5 简单的介绍及基于YOLOV5迁移学习  (1)</h1><ul><li><h3 id="以下是本人在学校每周报告会发表的内容-其中一期"><a href="#以下是本人在学校每周报告会发表的内容-其中一期" class="headerlink" title="以下是本人在学校每周报告会发表的内容(其中一期)"></a>以下是本人在学校每周报告会发表的内容(其中一期)</h3></li><li><h3 id="The-structure-of-YOLOV5"><a href="#The-structure-of-YOLOV5" class="headerlink" title="The structure of YOLOV5"></a>The structure of YOLOV5</h3><p><img src="https://user-images.githubusercontent.com/50350039/119788546-30d9eb00-bf0d-11eb-94e4-98ab6d5e64be.png" alt="image"></p><hr><h4 id="The-structure-of-Yolov5-uses-a-single-stage-detection-structure-The-structure-diagram-is-shown-in-the-figure-above-It-is-mainly-divided-into-five-stages"><a href="#The-structure-of-Yolov5-uses-a-single-stage-detection-structure-The-structure-diagram-is-shown-in-the-figure-above-It-is-mainly-divided-into-five-stages" class="headerlink" title="The structure of Yolov5 uses a single-stage detection structure. The structure diagram is shown in the figure above. It is mainly divided into five stages:"></a>The structure of Yolov5 uses a single-stage detection structure. The structure diagram is shown in the figure above. It is mainly divided into five stages:</h4><hr><ol><li><h3 id="Input-Image-input-terminal-and-data-processing-Mosaic-Cutout-matrix-training"><a href="#Input-Image-input-terminal-and-data-processing-Mosaic-Cutout-matrix-training" class="headerlink" title="Input: Image input terminal and data processing. Mosaic, Cutout, matrix training."></a>Input: Image input terminal and data processing. Mosaic, Cutout, matrix training.</h3></li><li><h3 id="Backbone-Extract-the-features-of-high-middle-and-low-layers-using-CSP-Fcous-Leaky-ReLU-etc"><a href="#Backbone-Extract-the-features-of-high-middle-and-low-layers-using-CSP-Fcous-Leaky-ReLU-etc" class="headerlink" title="Backbone: Extract the features of high, middle and low layers, using CSP, Fcous, Leaky ReLU, etc."></a>Backbone: Extract the features of high, middle and low layers, using CSP, Fcous, Leaky ReLU, etc.</h3></li><li><h3 id="Neck-Fusion-of-features-at-various-levels-to-extract-large-medium-and-small-feature-maps"><a href="#Neck-Fusion-of-features-at-various-levels-to-extract-large-medium-and-small-feature-maps" class="headerlink" title="Neck: Fusion of features at various levels to extract large, medium and small feature maps."></a>Neck: Fusion of features at various levels to extract large, medium and small feature maps.</h3></li><li><h3 id="Head-Perform-the-final-detection-part-apply-the-anchor-box-on-the-feature-map-and-generate-the-final-output-vector-with-class-probability-object-score-and-bounding-box"><a href="#Head-Perform-the-final-detection-part-apply-the-anchor-box-on-the-feature-map-and-generate-the-final-output-vector-with-class-probability-object-score-and-bounding-box" class="headerlink" title="Head: Perform the final detection part, apply the anchor box on the feature map, and generate the final output vector with class probability, object score and bounding box."></a>Head: Perform the final detection part, apply the anchor box on the feature map, and generate the final output vector with class probability, object score and bounding box.</h3></li><li><h3 id="Loss-Calculate-the-Loss-of-the-prediction-result-and-ground-truth-and-back-propagate-to-update-the-parameters-of-the-model"><a href="#Loss-Calculate-the-Loss-of-the-prediction-result-and-ground-truth-and-back-propagate-to-update-the-parameters-of-the-model" class="headerlink" title="Loss: Calculate the Loss of the prediction result and ground truth, and back-propagate to update the parameters of the model."></a>Loss: Calculate the Loss of the prediction result and ground truth, and back-propagate to update the parameters of the model.</h3></li></ol><hr></li></ul><ul><li><h3 id="Yolov5-five-models"><a href="#Yolov5-five-models" class="headerlink" title="Yolov5 five models"></a>Yolov5 five models</h3></li></ul><p><img src="https://user-images.githubusercontent.com/50350039/119789768-50bdde80-bf0e-11eb-9342-ae9580120805.png" alt="image"></p><ul><li><h3 id="Yolov5-integrates-a-large-number-of-State-of-the-art-in-the-field-of-target-detection-at-various-stages-and-its-code-structure-is-as-follows"><a href="#Yolov5-integrates-a-large-number-of-State-of-the-art-in-the-field-of-target-detection-at-various-stages-and-its-code-structure-is-as-follows" class="headerlink" title="Yolov5 integrates a large number of State-of-the-art in the field of target detection at various stages, and its code structure is as follows:"></a>Yolov5 integrates a large number of State-of-the-art in the field of target detection at various stages, and its code structure is as follows:</h3><p><img src="https://user-images.githubusercontent.com/50350039/119792411-a1ced200-bf10-11eb-9cfe-9353f88a3c5c.png" alt="image"></p></li><li><h3 id="how-to-freeze-YOLOv5-layers-when-transfer-learning"><a href="#how-to-freeze-YOLOv5-layers-when-transfer-learning" class="headerlink" title="how to freeze YOLOv5  layers when transfer learning"></a>how to <strong>freeze</strong> YOLOv5  layers when <strong>transfer learning</strong></h3><ul><li><h3 id="Fix-the-backbone"><a href="#Fix-the-backbone" class="headerlink" title="Fix the backbone"></a>Fix the backbone</h3></li></ul><h3 id="Fix-the-weight-of-the-YOLOV5-model-so-that-it-dose-not-change-during-transfer-learning"><a href="#Fix-the-weight-of-the-YOLOV5-model-so-that-it-dose-not-change-during-transfer-learning" class="headerlink" title="Fix the weight of the YOLOV5 model so that it dose not change during transfer learning."></a>Fix the weight of the YOLOV5 model so that it dose not change during transfer learning.</h3><h3 id="I-refer-to-this-article-for-reference-here-1-Transfer-Learing-with-Frozen-Layers"><a href="#I-refer-to-this-article-for-reference-here-1-Transfer-Learing-with-Frozen-Layers" class="headerlink" title="I refer to this article for reference here   [1] Transfer Learing with Frozen Layers"></a>I refer to this article for reference here   [1] <a href="https://github.com/ultralytics/yolov5/issues/1314">Transfer Learing with Frozen Layers</a></h3><h3 id="Look-at-a-file-with-yolov5-models-yolov5s-yaml-we-can-see-that-the-first-10-layers-are-the-backbone-that-extract-the-features"><a href="#Look-at-a-file-with-yolov5-models-yolov5s-yaml-we-can-see-that-the-first-10-layers-are-the-backbone-that-extract-the-features" class="headerlink" title="Look at a file with  yolov5/models/yolov5s.yaml . we can see that the first 10 layers are the backbone that extract the features."></a>Look at a file with  yolov5/models/yolov5s.yaml . we can see that the first 10 layers are the backbone that extract the features.</h3><pre class="line-numbers language-none"><code class="language-none"># YOLOv5 backbone  backbone:    # [from, number, module, args]    [[-1, 1, Focus, [64, 3]],  # 0-P1/2     [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4     [-1, 3, BottleneckCSP, [128]],     [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8     [-1, 9, BottleneckCSP, [256]],     [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16     [-1, 9, BottleneckCSP, [512]],     [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32     [-1, 1, SPP, [1024, [5, 9, 13]]],     [-1, 3, BottleneckCSP, [1024, False]],  # 9    ]    # YOLOv5 head  head:    [[-1, 1, Conv, [512, 1, 1]],     [-1, 1, nn.Upsample, [None, 2, 'nearest']],     [[-1, 6], 1, Concat, [1]],  # cat backbone P4     [-1, 3, BottleneckCSP, [512, False]],  # 13       [-1, 1, Conv, [256, 1, 1]],     [-1, 1, nn.Upsample, [None, 2, 'nearest']],     [[-1, 4], 1, Concat, [1]],  # cat backbone P3     [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3/8-small)       [-1, 1, Conv, [256, 3, 2]],     [[-1, 14], 1, Concat, [1]],  # cat head P4     [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4/16-medium)       [-1, 1, Conv, [512, 3, 2]],     [[-1, 10], 1, Concat, [1]],  # cat head P5     [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5/32-large)       [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)    ] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><h3 id="Fix-this-10-layer-method-in-yolov5-train-py"><a href="#Fix-this-10-layer-method-in-yolov5-train-py" class="headerlink" title="Fix this 10 layer method in yolov5/train.py"></a>Fix this 10 layer method in yolov5/train.py</h3><pre class="line-numbers language-none"><code class="language-none"># Freezefreeze = []  # parameter names to freeze (full or partial)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><h3 id="change-this-to"><a href="#change-this-to" class="headerlink" title="change this to:"></a>change this to:</h3><pre class="line-numbers language-none"><code class="language-none">freeze = ['model.%s.' % x for x in range(10)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="This-alone-will-lock-the-weights-of-the-first-10-layers-and-will-not-change-during-training"><a href="#This-alone-will-lock-the-weights-of-the-first-10-layers-and-will-not-change-during-training" class="headerlink" title="This alone will lock the weights of the first 10 layers and will not change during training."></a>This alone will lock the weights of the first 10 layers and will not change during training.</h3><h3 id="Next-article「如和使用YOLOV5训练自己的数据——How-to-train-your-data-with-YoloV5-」"><a href="#Next-article「如和使用YOLOV5训练自己的数据——How-to-train-your-data-with-YoloV5-」" class="headerlink" title="Next article「如和使用YOLOV5训练自己的数据——How to train your data with YoloV5 」"></a>Next article「如和使用YOLOV5训练自己的数据——How to train your data with YoloV5 」</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> YOLO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用方法</title>
      <link href="2021/05/15/git-de-yong-fa/"/>
      <url>2021/05/15/git-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="git-简单使用方法"><a href="#git-简单使用方法" class="headerlink" title="git 简单使用方法"></a>git 简单使用方法</h1><ul><li><p>从自己电脑上传代码到github。</p></li><li><p><img src="https://img-blog.csdnimg.cn/2021051501291033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="git"></p></li><li><p>代码的追加以及更新,如果出现以下错误：</p><pre class="line-numbers language-none"><code class="language-none">git push origin mastererror: src refspec master does not match anyerror: failed to push some refs to 'git@github.com:user-name/repository-name.git'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color="#dd0000"><strong>error: src refspec master does not match any</strong></font><br></p></li><li><p>你需要做的是，检查是否<font color="#dd0000"><strong>commit</strong></font>。<br></p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> 文件名<span class="token function">git</span> commit -m <span class="token string">'提交版本信息'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如果进行了以上操作，还是出现了<font color="#dd0000"><strong>error</strong></font>，&lt;br /这是因为GIthub的master branch 变成了 main branch。</p><p>如果你输入以下代码就会解决以上问题。</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解決</span><span class="token function">git</span> checkout main<span class="token function">git</span> pull origin main <span class="token comment">#把github的代码pull到本地</span><span class="token function">git</span> push origin main <span class="token comment">#上传自己的新代码文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#dd0000"><strong>github仓库代码pull前的状态</strong></font><br><img src="https://img-blog.csdnimg.cn/20210515023109518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p><font color="#dd0000"><strong>把新的代码上传push到github仓库的状态</strong></font><br></p><p><img src="https://img-blog.csdnimg.cn/20210515023124717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p>可以看到，从local电脑里更新到github上的文件。</p><ul><li>具体电脑上运行的流程，以及出错的代码如下：</li></ul><p><img src="https://img-blog.csdnimg.cn/20210515012937414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对云服务器的选购</title>
      <link href="2021/02/17/dui-yun-fu-wu-qi-de-xuan-gou/"/>
      <url>2021/02/17/dui-yun-fu-wu-qi-de-xuan-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="对云服务器的选购"><a href="#对云服务器的选购" class="headerlink" title="对云服务器的选购"></a>对云服务器的选购</h1><h2 id="到今天为止，我终于要开始建立自己的商用网站了，在服务器上布置wordpress-和-宝塔linux面板。"><a href="#到今天为止，我终于要开始建立自己的商用网站了，在服务器上布置wordpress-和-宝塔linux面板。" class="headerlink" title="到今天为止，我终于要开始建立自己的商用网站了，在服务器上布置wordpress 和 宝塔linux面板。"></a>到今天为止，我终于要开始建立自己的商用网站了，在服务器上布置wordpress 和 宝塔linux面板。</h2><h1 id="CPU核数"><a href="#CPU核数" class="headerlink" title="CPU核数"></a>CPU核数</h1><ul><li><h5 id="CPU核数，指的是CPU内核数量。CPU内核是CPU的重要组成部件，由单晶硅以一定的生产工艺制造出来，CPU所有的计算、接受-存储命令、处理数据都由内核执行。"><a href="#CPU核数，指的是CPU内核数量。CPU内核是CPU的重要组成部件，由单晶硅以一定的生产工艺制造出来，CPU所有的计算、接受-存储命令、处理数据都由内核执行。" class="headerlink" title="CPU核数，指的是CPU内核数量。CPU内核是CPU的重要组成部件，由单晶硅以一定的生产工艺制造出来，CPU所有的计算、接受/存储命令、处理数据都由内核执行。"></a>CPU核数，指的是CPU内核数量。CPU内核是CPU的重要组成部件，由单晶硅以一定的生产工艺制造出来，CPU所有的计算、接受/存储命令、处理数据都由内核执行。</h5></li><li><h5 id="常见的CPU核数有双核、四核、六核、八核、十二核等。在内核频率、缓存大小等条件相同的情况下，CPU内核数量越多，CPU的整体性能越强。比如3-8GHz的6核CPU就比3-8GHz的双核CPU性能要强。"><a href="#常见的CPU核数有双核、四核、六核、八核、十二核等。在内核频率、缓存大小等条件相同的情况下，CPU内核数量越多，CPU的整体性能越强。比如3-8GHz的6核CPU就比3-8GHz的双核CPU性能要强。" class="headerlink" title="常见的CPU核数有双核、四核、六核、八核、十二核等。在内核频率、缓存大小等条件相同的情况下，CPU内核数量越多，CPU的整体性能越强。比如3.8GHz的6核CPU就比3.8GHz的双核CPU性能要强。"></a>常见的CPU核数有双核、四核、六核、八核、十二核等。在内核频率、缓存大小等条件相同的情况下，CPU内核数量越多，CPU的整体性能越强。比如3.8GHz的6核CPU就比3.8GHz的双核CPU性能要强。</h5></li></ul><table><thead><tr><th>配置</th><th>试用场景</th></tr></thead><tbody><tr><td>1核CPU/1G内存/1M带宽</td><td>个人博客或者访问量少的展示类Web应用</td></tr><tr><td>2核CPU/4G内存/3M带宽</td><td>论坛、门户类网站，用户活跃性与访问量较高，保证资源空间，提升访问速度。</td></tr><tr><td>2核CPU/8G内存/5M宽带</td><td>对官网、品牌较为重视的政府、企业等，网站浏览流利顺畅，提升政府、品牌形象。</td></tr><tr><td>4核CPU/8G内存/8M宽带</td><td>视频、电商类网站，包含很多数据信息，迅速处理信息保证网站正常进行。</td></tr><tr><td>18核CPU/16G内存/10M宽带</td><td>游戏、软件类网站，对开发、测试、环境要求较高的游戏软件类网站，较高的资源配置带来更强劲的计算性能，保证业务需求。</td></tr></tbody></table><h1 id="Ubuntu主机下安装宝塔linux面板"><a href="#Ubuntu主机下安装宝塔linux面板" class="headerlink" title="Ubuntu主机下安装宝塔linux面板"></a>Ubuntu主机下安装宝塔linux面板</h1><p>点击蓝字连接宝塔linux安装网址<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">宝塔安装网址</a></p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">sudo -i //切换到rootwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.shbt restart//重启面板<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果安装成功 ，基于本地的服务器的公网IP地址和账号被自动显示在终端上面。</p><p><img src="https://user-images.githubusercontent.com/50350039/133613795-bda2e6da-d7e3-491b-a6bf-2b59674c2760.png"></p><p>如果通过公网ip地址访问不到宝塔页面，会有下面红字英文提示。</p><p><font color="red"> If you cannot access the panel, release the following port [8888] in the security group</font></p><p>说明你需要开放8888端口。</p><p><img src="https://user-images.githubusercontent.com/50350039/133617258-bd514e31-e687-42ca-ab5a-afb3142f5980.png"></p><p>进去以后，一键安装所需要的东西。</p><p><img src="https://user-images.githubusercontent.com/50350039/133620213-62945ca0-c6f5-4dcc-a484-9bd9df5f15cc.png"></p><p>所有程序安装好以后，点击软件商店，选择宝塔商店，选择宝塔一键部署源码。</p><p><img src="https://user-images.githubusercontent.com/50350039/133627066-79090fbb-b4ce-4262-8120-e2a653d0aa1e.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133627202-39fdc05d-9e11-4e63-9bb0-8562e99ce120.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133632592-75c78c7a-efba-4f90-bce1-92866de275c1.png"></p><h1 id="域名的注册"><a href="#域名的注册" class="headerlink" title="域名的注册"></a>域名的注册</h1><ul><li><h4 id="玩到这一步就需要域名了，这时候就需要注册Domain，这次我还是在亚马逊上注册域名。"><a href="#玩到这一步就需要域名了，这时候就需要注册Domain，这次我还是在亚马逊上注册域名。" class="headerlink" title="玩到这一步就需要域名了，这时候就需要注册Domain，这次我还是在亚马逊上注册域名。"></a>玩到这一步就需要域名了，这时候就需要注册Domain，这次我还是在亚马逊上注册域名。</h4><h4 id="亚马逊注册域名超级快，官网说需要3天，但是没想到半个小时就成功了，嘎嘎嘎嘎，，，，，，可以继续愉快地玩耍。"><a href="#亚马逊注册域名超级快，官网说需要3天，但是没想到半个小时就成功了，嘎嘎嘎嘎，，，，，，可以继续愉快地玩耍。" class="headerlink" title="亚马逊注册域名超级快，官网说需要3天，但是没想到半个小时就成功了，嘎嘎嘎嘎，，，，，，可以继续愉快地玩耍。"></a>亚马逊注册域名超级快，官网说需要3天，但是没想到半个小时就成功了，嘎嘎嘎嘎，，，，，，可以继续愉快地玩耍。</h4><p><img src="https://user-images.githubusercontent.com/50350039/133635181-33a0bf18-ada3-41f3-8019-849d8a8b507e.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133634567-6ea01e06-bd33-4a43-8840-a275e6dab140.png"></p></li></ul><h1 id="域名的解析"><a href="#域名的解析" class="headerlink" title="域名的解析"></a>域名的解析</h1><p>注册后的域名还不能用，还得需要解析才能在公网访问到，所以这里域名的解析我选择<font color="red">&nbsp;CLOUDFLARE</font>。为什么推荐使用CLOUDFLARE？因为它本身有一个特别大的优势-因为它有免费的DNS服务，DNS服务可以隐藏你的VPS的IP。另一方面，还可以救活你被“墙”的VPS的IP。如果你VPS的IP被“墙”，你的网页是不能在中国国内被访问到的。但是你套上Cloudflare免费 的DNS，就可以正常访问啦！！！</p><p>点击蓝字连接域名解析网址<a href="https://www.cloudflare.com/zh-cn/hp/">CLOUDFLARE</a></p><p>进入CLOUDFLARE之后注册很简单。</p><p><img src="https://user-images.githubusercontent.com/50350039/133640107-92434d14-e431-480f-9d05-33c4b170cce7.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133640297-f4f80aca-ba74-4962-832b-f1f50175ded6.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133642092-da3d406b-0d76-4c24-b56b-32a56e79f1a6.png"></p><p>如上步骤完成之后，需要到你注册域名的地方，把nameservers更改成cloudflare的namespaces。</p><p><img src="https://user-images.githubusercontent.com/50350039/133732824-e1745cb7-f337-4232-986e-44de92f57952.png"></p><p>之后就会看到，你的域名处于激活状态。</p><p><img src="https://user-images.githubusercontent.com/50350039/133732990-99f9d27d-9e17-4c7a-836f-b25e9214fbb4.png"></p><h1 id="回到宝塔页面安装wordpres-在安装之前需要在云服务器上面开放端口，比如http的端口。"><a href="#回到宝塔页面安装wordpres-在安装之前需要在云服务器上面开放端口，比如http的端口。" class="headerlink" title="回到宝塔页面安装wordpres,在安装之前需要在云服务器上面开放端口，比如http的端口。"></a>回到宝塔页面安装wordpres,在安装之前需要在云服务器上面开放端口，比如http的端口。</h1><p>如果不开放端口，你即使安装好了wordpress也打不开页面。</p><p><img src="https://user-images.githubusercontent.com/50350039/133733470-393b1611-e133-44bb-86fa-8c0d7df4dff8.png"></p><p>一般常见端口：80端口-http，443端口-https，8888端口-宝塔，888端口-宝塔phpmyadmin，22端口-ssh，3389端口-RDPwin远程桌面，3306端口-mysql。</p><p>我们申请的域名,以xjwzhenshuai.com这样的域名举例子，我是想让无论是www.的还是不带www.都能在浏览器页面上搜索访问到。在解析的时候要把这两个都做好A类DNS解析，在一键搭建wordpress时，需要把带www和不带www的都填进去。如下图所示：</p><p><img src="https://user-images.githubusercontent.com/50350039/133735607-27c1b496-ac2d-463c-ba17-775a325ecfe2.png"></p><p>到此为止  终于可以进入网站内容的开发和设置了。</p><p><img src="https://user-images.githubusercontent.com/50350039/133735868-6ef34f67-904a-408f-8ce4-16cb36c4b2cc.png"></p>]]></content>
      
      
      <categories>
          
          <category> AWS Server </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Win10Docker Desktop(WSL2) pull的image等从C盘移植其他盘</title>
      <link href="2021/01/30/win10docker-desktop-wsl2-pull-de-image-deng-cong-c-pan-yi-zhi-qi-ta-pan/"/>
      <url>2021/01/30/win10docker-desktop-wsl2-pull-de-image-deng-cong-c-pan-yi-zhi-qi-ta-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10Docker-Desktop-WSL2-pull的image等从C盘移植其他盘"><a href="#Win10Docker-Desktop-WSL2-pull的image等从C盘移植其他盘" class="headerlink" title="Win10Docker Desktop(WSL2) pull的image等从C盘移植其他盘"></a>Win10Docker Desktop(WSL2) pull的image等从C盘移植其他盘</h1><h2 id="缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择"><a href="#缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择" class="headerlink" title="缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择"></a>缘由：由于c系统盘储存空间有限，Docker的桌面版有默认安装在C盘，在这么下去电脑该用不了了，移植其他盘是唯一的选择</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl -l -v --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210130201404860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li>docker-desktop是存放程序的</li><li>docker-desktop-data是存放镜像的</li></ul><h2 id="Clean-Purge-data-删除镜像-wsl-hyperv"><a href="#Clean-Purge-data-删除镜像-wsl-hyperv" class="headerlink" title="Clean/Purge data  删除镜像 wsl hyperv"></a>Clean/Purge data  删除镜像 wsl hyperv</h2><p><img src="https://img-blog.csdnimg.cn/20210130201625903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><h2 id="打包wsl系统镜像"><a href="#打包wsl系统镜像" class="headerlink" title="打包wsl系统镜像"></a>打包wsl系统镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --export docker-desktop docker-desktop.tar$ wsl --export docker-desktop-data docker-desktop-data.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021013020181257.png"></p><h2 id="解除现有登录的wsl子系统"><a href="#解除现有登录的wsl子系统" class="headerlink" title="解除现有登录的wsl子系统"></a>解除现有登录的wsl子系统</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --unregister docker-desktop$ wsl --unregister docker-desktop-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="把刚刚打包过的系统文件，导入到自己想要的盘下面"><a href="#把刚刚打包过的系统文件，导入到自己想要的盘下面" class="headerlink" title="把刚刚打包过的系统文件，导入到自己想要的盘下面"></a>把刚刚打包过的系统文件，导入到自己想要的盘下面</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --import docker-desktop d:<span class="token punctuation">\</span>your-install-path docker-desktop.tar$ wsl --import docker-desktop-data d:<span class="token punctuation">\</span>your-install-path docker-desktop-data.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021013020214070.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p><strong>这个地方需要注意</strong>，如果把docker-desktop和docker-desktop-data导入到一个文件夹里面会失败，导入到两个名字不同的文件夹里就OK了，然后重启<strong>docker desktop</strong></p></li><li><p><img src="https://img-blog.csdnimg.cn/20210130202401881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><h2 id="Pull一个镜像试一试，看看C盘的存储增不增加"><a href="#Pull一个镜像试一试，看看C盘的存储增不增加" class="headerlink" title="Pull一个镜像试一试，看看C盘的存储增不增加"></a>Pull一个镜像试一试，看看C盘的存储增不增加</h2><p>Pull一个ROS的镜像，大概有两三个G大小<br><img src="https://img-blog.csdnimg.cn/20210130202555124.png"><br>我们先看一下，<strong>F盘</strong>下的存储docker image的地方，存储有没有增加<br><img src="https://img-blog.csdnimg.cn/20210130202924280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210130202936112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210130202945608.png"></p></li><li><p>由上可以见到，F盘随着pull的时间，储存量越来越多，C盘的存储却不会变，<strong>大吉大利，今晚吃鸡！！！！</strong> 嘎嘎嘎</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚马逊白嫖12个月服务器并设置内网穿透</title>
      <link href="2021/01/26/ya-ma-xun-bai-piao-fu-wu-qi-bing-she-zhi-nei-wang-chuan-tou/"/>
      <url>2021/01/26/ya-ma-xun-bai-piao-fu-wu-qi-bing-she-zhi-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="亚马逊白嫖12个月服务器并设置内网穿透"><a href="#亚马逊白嫖12个月服务器并设置内网穿透" class="headerlink" title="亚马逊白嫖12个月服务器并设置内网穿透"></a>亚马逊白嫖12个月服务器并设置内网穿透</h1><ul><li><p>缘由是因为学校研究室的服务器，是隐藏在关西大学<strong>NAT</strong>和<strong>Firewall</strong>的背后，如果没有公开的IP地址是不能访问到研究室的服务器上传文件或者获取文件等等，所以就考虑到Google和AWS等云服务租借服务器的话，每个服务器都会有自己的公有ip地址。而且亚马逊云服务对于<strong>初次</strong>注册账号的用户可以免费使用12个月的服务器，当然啦免费的么，服务器的配置是很低的。内网穿透的原理以及AWS的server如下图所示<img src="https://img-blog.csdnimg.cn/20210124204354864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="内网穿透"></p><p><img src="https://img-blog.csdnimg.cn/20210124204148550.png" alt="AWS免费server"></p></li><li><p>下一步安装Docker，我选的是Ubuntu所以安装的时候选Linux<br>这步是如果之前有过安装docker或者有老版本的docker，那么卸载它</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>    apt-transport-https <span class="token punctuation">\</span>    ca-certificates <span class="token punctuation">\</span>    <span class="token function">curl</span> <span class="token punctuation">\</span>    gnupg-agent <span class="token punctuation">\</span>    software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加docker GPG官方密钥</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> apt-key fingerprint 0EBFCD88pub   rsa4096 <span class="token number">2017</span>-02-22 <span class="token punctuation">[</span>SCEA<span class="token punctuation">]</span>      9DC8 <span class="token number">5822</span> 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88uid           <span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> Docker Release <span class="token punctuation">(</span>CE deb<span class="token punctuation">)</span> <span class="token operator">&lt;</span>docker@docker.com<span class="token operator">&gt;</span>sub   rsa4096 <span class="token number">2017</span>-02-22 <span class="token punctuation">[</span>S<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置存储库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> add-apt-repository <span class="token punctuation">\</span>   <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \   <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \   stable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装docker引擎</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装Docker 可视化工具<strong>Portainer</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker search portainer <span class="token operator">|</span><span class="token function">head</span> -n <span class="token number">3</span>$ docker volume create portainer_data$ docker run -d -p <span class="token number">9000</span>:9000 --name<span class="token operator">=</span>portainer --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer20db26b67b791648c2ef6aee444a5226a9c897ebcf0160050e722dbf4a4906e3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个地方，<strong>http://公网地址:9000</strong><br>如果网页没有打开，或者连接不上那是因为9000的端口没有开放，要去AWS管理台自己的实例的安全群组哪里开放9000端口,设置完之后就应该出现登录页面，第一次需自行设置账户密码。<br><img src="https://img-blog.csdnimg.cn/20210124210103904.png" alt="开放9000端口"><br><img src="https://img-blog.csdnimg.cn/20210124210248142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>下一步Docker hub里找到frps有关的镜像在Portainer里面进行拉取<br><img src="https://img-blog.csdnimg.cn/20210124210649187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="拉取镜像"></li><li>设置参数在Containers里面就会看到AWSserver运行的两个docker 容器</li></ul><p><img src="https://img-blog.csdnimg.cn/20210124210806883.png" alt="docker容器"></p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于renren-fast开发，负载均衡缺少pom文件大坑</title>
      <link href="2021/01/06/renren-fast/"/>
      <url>2021/01/06/renren-fast/</url>
      
        <content type="html"><![CDATA[<p>@通过网关连接renren-fast时候报的错</p><h1 id="Error-creating-bean-with-name-‘ribbonLoadBalancingHttpClient’"><a href="#Error-creating-bean-with-name-‘ribbonLoadBalancingHttpClient’" class="headerlink" title="Error creating bean with name ‘ribbonLoadBalancingHttpClient’"></a>Error creating bean with name ‘ribbonLoadBalancingHttpClient’</h1><p>通过spring gateway 网关把请求分配给renren-fast的时候出现了以下错误。</p><pre class="line-numbers language-none"><code class="language-none">2021-01-06 22:47:02.793 ERROR 14024 --- [ctor-http-nio-2] a.w.r.e.AbstractErrorWebExceptionHandler : [b41c453c] 500 Server Error for HTTP GET "/api/captcha.jpg?uuid=197cc4fb-3695-43cd-8293-8cf4dc31b91f"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>couse by 1</p><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ribbonLoadBalancer' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Unsatisfied dependency expressed through method 'ribbonLoadBalancer' parameter 2; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ribbonServerListFilter' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.loadbalancer.ServerListFilter]: Factory method 'ribbonServerListFilter' threw exception; nested exception is java.lang.NoClassDefFoundError: com/netflix/servo/monitor/Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>couse by 2</p><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ribbonServerListFilter' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.loadbalancer.ServerListFilter]: Factory method 'ribbonServerListFilter' threw exception; nested exception is java.lang.NoClassDefFoundError: com/netflix/servo/monitor/Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210106222317765.png">根本没有这个东西</p><p>所以参考<br>链接: <a href="https://www.cnblogs.com/ye-feng-yu/p/11106006.html">link</a>.的博客gateway ribbon 负载均衡这块，发现自己的pom文件里没有如下依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个加上，重新reload Maven 重跑gateway<br><img src="https://img-blog.csdnimg.cn/2021010700364017.png"><br>原先获取图片的地方由500 变成了 200  成功了 </p>]]></content>
      
      
      <categories>
          
          <category> renren-fast </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL编码问题的坑</title>
      <link href="2020/12/08/mysql-bian-ma-de-keng/"/>
      <url>2020/12/08/mysql-bian-ma-de-keng/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL编码问题的坑"><a href="#MySQL编码问题的坑" class="headerlink" title="MySQL编码问题的坑"></a>MySQL编码问题的坑</h1><ul><li>缘由通过前端页码往后端post请求数据更改，中文出现“？？？”的问题<img src="https://img-blog.csdnimg.cn/20210123192905122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></li><li>进入docker MySQL的交互容器内</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker <span class="token builtin class-name">exec</span> -it mysql /bin/bash$ mysql -u root -p<span class="token comment"># 查看编码方式</span>$ show variables like <span class="token string">'character\_set\_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img-blog.csdnimg.cn/20210123194719226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2021012401044694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="service mysqld restart"></p><p>储存的中文数据什么也显示不出来，大部分都为latin1，猜想可能这块有问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ SET character_set_client <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_connection <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_database <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_results <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_server <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重新查看MySQL的编码形式，然而并没有卵用，MySQL依旧是打不死的小强，无论你你怎么能他依然latin1屹立不倒</p><ul><li><strong>所以要找到MySQL的my.cof配置文件的位置，对配置文件进行改动</strong><br>如下面代码所示，我认为这个是中文不出现乱码的最好的配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">init_connect</span><span class="token operator">=</span>’SET collation_connection <span class="token operator">=</span> utf8_unicode_ci’<span class="token assign-left variable">init_connect</span><span class="token operator">=</span>’SET NAMES utf8’character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我又重启了MySQL，看了一遍编码方式我的天latin1纹丝不动我都要吐血了。</p><p>查阅了很多资料都是废话连篇，千篇一律。</p><p>所以思考是不是配置文件放错地方，导致MySQL根本没有察觉到配置文件的存在，在这里我要说一下我的配置文件原先设置的位置是 etc/mysql/my.conf<br>一般配置文件是直接放在etc下面的，所以etc下vim了个my.conf，把utf8的配置粘贴了进去，中心启动MySQL服务器，<br><img src="https://img-blog.csdnimg.cn/20210124024319195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br>清一色utf8，嘎嘎舒服<br>所以说MySQL的my.cnf这个配置文件放的地方<br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>重要的事说三遍</p><p><img src="https://img-blog.csdnimg.cn/20210124024434599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br>前端页码发送post的请求，刷新返回来的数据也显示中文了哈哈。。。。</p><h2 id="一点应该知道的基础知识"><a href="#一点应该知道的基础知识" class="headerlink" title="一点应该知道的基础知识"></a>一点应该知道的基础知识</h2><ul><li>小插曲 如果想查看MySQL的配置文件要到/etc/mysql/my.cnf的地方 cat一下可以看到配置信息，<strong>MySQL配置文件在Windows下叫my.ini，在MySQL的安装根目录下；在Linux下叫my.cnf，该文件位于/etc/my.cnf。</strong></li><li>我们在创建基础容器之后，进入容器，进行编辑配置文件的时候，需要使用vim或者vi命令，但是会出现：这是因为vim没有安装。</li></ul><p>安装vim就好啦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> update$ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="MySQL的基本操作方法"><a href="#MySQL的基本操作方法" class="headerlink" title="MySQL的基本操作方法"></a>MySQL的基本操作方法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql -u root -p$ SHOW DATABASES<span class="token punctuation">;</span>$ USE 数据库名称$ show tables<span class="token punctuation">;</span>$ <span class="token keyword">select</span> * from 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装 NVIDIA Driver，CUDA, cuDNN</title>
      <link href="2020/04/20/ubuntu-an-zhuang/"/>
      <url>2020/04/20/ubuntu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<ul><li>用USB引导盘装好系统以后，选英语语言和英语键盘并且加入字体库命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /usr/lib/locale$ <span class="token function">sudo</span> locale-gen - -purge - -no-archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>下载 NVIDIA  Driver</li></ol><table><thead><tr><th>CUDA Toolkit</th><th>Linux x86_64 Driver Version</th></tr></thead><tbody><tr><td>CUDA 9.2(9.2.88)</td><td>&gt;=396.26</td></tr><tr><td>CUDA 9.2(9.2.148 Update 1)</td><td>&gt;=396.37 &amp;&amp; &lt;410.48</td></tr><tr><td>CUDA 10.1</td><td>&gt;=418.39</td></tr><tr><td>CUDA 10.2.89</td><td>&gt;=440.33</td></tr><tr><td>CUDA 11.0.1 RC</td><td>&gt;=450.36.06</td></tr><tr><td>CUDA 11.0.2 GA</td><td>&gt;=450.51.05</td></tr><tr><td>CUDA 11.0.3 Update 1</td><td>&gt;=450.51.06</td></tr></tbody></table><ol start="2"><li>NVIDIA  Driver 安装</li></ol><p>在google搜索nvidia drivers找到官网，下载驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> purge nvidia*$ <span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential gcc-multilib dkms$ <span class="token function">sudo</span> <span class="token function">touch</span> /etc/modprobe.d/blacklist-nouveau.conf$ <span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist-nouveau.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入<br>blacklist nouveau<br>options nouveau modeset=0<br>进入/etc/default 找到grub文件，在此⻚打开terminal，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gedit grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 GRUB-CMDLINE-LINUX-DEFAULT=“quiet splash“处的splash 后加nomodeset</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> update-initramfs -u $ <span class="token function">sudo</span> update-grub2$ <span class="token builtin class-name">cd</span> ~$ <span class="token builtin class-name">cd</span> /Downloads$ <span class="token function">ls</span> -la$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x NVIDIA-Linux-x86_64-450.57.run $ <span class="token function">sudo</span> ./NVIDIA-Linux-x86_64-450.57.run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装CUDA</li></ol><p>去官网找到相应版本，installer Type选deb(local)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/profile.d/cuda.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/cuda/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDADIR</span><span class="token operator">=</span>/usr/local/cuda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/profile.d/cuda.sh $ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/ld.so.conf.d/cuda.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ldconfig $ <span class="token function">reboot</span>$ nvcc - -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>cuDNN 的安装<br>官方网站下载cudnn</li></ol><ul><li>cuDNN Library for Linux (x86)</li><li>cuDNN Runtime Library for Ubuntu 18.04</li><li>cuDNN Developer Library for Ubuntu 18.04</li><li>cuDNN Code Samples and User Guide for Ubuntu 18.04</li><li>如果双击后在软件仓库安装时出现无法俺从来而情况，可以通过命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i 要解压的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.1 将文件解压并复制到CUDA中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -xzvf cudnn-ooxx.tgz //解压文件，也可手动解压$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda/include$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64$ <span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.2 检验cuDNN是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> -r /usr/src/cudnn_samples_v7/mnistCUDNN <span class="token environment constant">$HOME</span>$ <span class="token builtin class-name">cd</span> <span class="token environment constant">$HOME</span>/cudnn_samples_v7/mnistCUDNN $ <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">make</span>$ ./mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出现了Test passed！ 则安装成功</p><p>如果命令copy过去没有编译成功 可以手动复制过去</p><p><img src="https://img-blog.csdnimg.cn/20210120045448638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210120045501656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker里面导入MySQL</title>
      <link href="2019/12/18/docker-mysql/"/>
      <url>2019/12/18/docker-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-hub"><a href="#docker-hub" class="headerlink" title="docker hub"></a>docker hub</h1><ul><li><p>下载MySQL镜像</p><p><code>sudo docker pull mysql:5.7</code></p></li><li><p>检查下载好的镜像</p><p><code>sudo docker images</code></p></li><li><p>切换root的用户</p><p><code>su root</code></p></li><li><p>启动容器</p><p>docker run -p 3306:3306 –name mysql \</p></li></ul><blockquote><p>-v /mydata/mysql/log:/var/log/mysql <br>-v /mydata/mysql/data:/var/lib/mysql <br>-v /mydata/mysql/conf:/etc/mysql <br>-e MYSQL_ROOT_PASSWORD=root <br>-d mysql:5.7</p></blockquote><pre><code>-p 3306:3306为端口映射</code></pre><p>-v 是目录挂载 具体意思是在本体linux下的/mydata/mysql/log  ：冒号就是与容器内部的/var/log/mysql进行挂载，直白的说容器内部log文件的记录 会直接反应到linux指定目录下，容器内不的日志，linux在外面也能够看到</p><p><img src="https://img-blog.csdnimg.cn/20210120010836980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p>如上图所示，MySQL容器挂载的各个log，数据，配置文件dg在外面root linux里面也是可以访问到的，容器外部对挂载文件直接修改，是可以同步到容器</p><ul><li><p>查看docker运行中的容器</p><p><code>docker ps</code></p></li><li><p>进入MySQL容器内部</p><ul><li><code>docker exec -it docker容器的前三位id\或者容器的名字 /bin/bash</code></li></ul><p><img src="https://img-blog.csdnimg.cn/2021012001085931.png"></p><ul><li>就会发现我们进入容器内部的环境当中，因为每一个容器都是一个小型的linux系统，如上图为哦们已经进入到MySQL容器的内部</li></ul><p><img src="https://img-blog.csdnimg.cn/20210120010917607.png"></p></li></ul><ul><li>查看目录结构会发现，他就是一个完整的一个linux的目录结构</li></ul><p><img src="https://img-blog.csdnimg.cn/20210120011025911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p>查看MySQL装在了那个位置</p><p><code>whereis mysql</code><br><img src="https://img-blog.csdnimg.cn/20210120011051134.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uuUv48u2-1611076069706)(C:\Users\jinue\AppData\Roaming\Typora\typora-user-images\image-20201206041528226.png)]"></p></li><li><p>下图是docker容器文件挂载与端口映射<br><img src="https://img-blog.csdnimg.cn/20210120011126996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p></li></ul><p>访问linux的3306接口也就能够访问到MySQL容器的3306的端口</p><p>cd conf      vi my.cnf</p><ul><li>复制下面配置文件</li></ul><p>[client]</p><p>default-character-set=utf8</p><p>[mysql]</p><p>default-character-set=utf8</p><p>[mysqld]</p><p>init_connect=’SET collation_connection = utf8_unicode_ci’</p><p>init_connect=’SET NAMES utf8’</p><p>character-set-server=utf8</p><p>collation-server=utf8_unicode_ci</p><p>skip-character-set-client-handshake</p><p>skip-name-resolve</p><p><img src="https://img-blog.csdnimg.cn/20210120011245615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p>docker 重启mysql</p><p><code>docker restart mysql</code></p></li></ul><ul><li><p>进入交互模式</p><p><code>docker exec -it mysql /bin/bash</code></p><p>查看linux上配置的文件是否同步到位</p><ul><li>进入MySQL内部查看配置</li><li><code>mysql -u root -p</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本筑波自动驾驶比赛记录</title>
      <link href="2019/11/18/zhu-bo-bi-sai-ji-lu/"/>
      <url>2019/11/18/zhu-bo-bi-sai-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="筑波自动驾驶比赛比赛记录"><a href="#筑波自动驾驶比赛比赛记录" class="headerlink" title="筑波自动驾驶比赛比赛记录"></a>筑波自动驾驶比赛比赛记录</h1><ul><li><h3 id="筑波自动驾驶比赛始从2007年开始，每年的秋天都会举行，今年已经是第13个年头。地点在-学園都市駅，也就是日本关东地区筑波市役所附近。筑波市在日本是唯一允许机器人在普通车道上行走，每年都受到日本各方面的广泛关注。"><a href="#筑波自动驾驶比赛始从2007年开始，每年的秋天都会举行，今年已经是第13个年头。地点在-学園都市駅，也就是日本关东地区筑波市役所附近。筑波市在日本是唯一允许机器人在普通车道上行走，每年都受到日本各方面的广泛关注。" class="headerlink" title="筑波自动驾驶比赛始从2007年开始，每年的秋天都会举行，今年已经是第13个年头。地点在 学園都市駅，也就是日本关东地区筑波市役所附近。筑波市在日本是唯一允许机器人在普通车道上行走，每年都受到日本各方面的广泛关注。"></a>筑波自动驾驶比赛始从2007年开始，每年的秋天都会举行，今年已经是第13个年头。地点在 <strong>学園都市駅</strong>，也就是日本关东地区筑波市役所附近。筑波市在日本是唯一允许机器人在普通车道上行走，每年都受到日本各方面的广泛关注。</h3></li></ul><h2 id="照片中身穿粉色衣服就是我"><a href="#照片中身穿粉色衣服就是我" class="headerlink" title="照片中身穿粉色衣服就是我"></a>照片中身穿粉色衣服就是我</h2><p>  <img src="https://user-images.githubusercontent.com/50350039/133486577-70338b3e-2d3b-4a19-9dfc-a3bcc34c5d60.jpg"></p><p>  <img src="https://user-images.githubusercontent.com/50350039/133486814-87a7b8cf-bfc7-4971-a9c6-7f96d69834dd.jpg"></p><ul><li><h1 id="比赛的具体内容"><a href="#比赛的具体内容" class="headerlink" title="比赛的具体内容"></a>比赛的具体内容</h1><p>如图所示，先在市役所前，穿梭两片草丛，然后上大路走到信号灯处等绿灯，之后从人行道上往前走200米再折返去公园，接着绕公园一大圈在返回。总距离3km。</p><p>问题点在于，两片草丛很近很矮，自身的激光雷达照不到，只能靠周围建筑物辅助判断位置。</p><p>公园非常开阔，雷达上特征量很少，而且也没有使用gps，非常难定位。</p><p>如何闭环成了大问题，绕着公园跑一圈，回到进入点，但是由于误差不断积累，地图上很难和进入点闭合。</p><p>66个队伍，跑完全程的只有2个队伍</p><p><img src="https://user-images.githubusercontent.com/50350039/133487348-f0cad685-7477-47cd-bfdb-6fd77a0b8290.png" alt="d93c762f2dd418d9ce8a21e6a46147d"></p><ul><li><h2 id="附加项目"><a href="#附加项目" class="headerlink" title="附加项目"></a>附加项目</h2><p>在市役所内部，不给提前收集数据，完全实时建图，从侧门进，转90度角，从正门出。</p><p>难点在，正门出入口的地方没有明显的标志，很难判断正门的位置，而且正门还是玻璃感应电动门，不太好从两扇门之间出来。</p><p>  66个队伍，最终只有1个队伍完成。</p></li></ul></li></ul><p>​                <img src="https://user-images.githubusercontent.com/50350039/133577255-4ef7735a-af61-448b-b77c-995c5d54efe3.png"></p><h2 id="下面按时间顺序吧比赛的过程进行简单的流水账式记录"><a href="#下面按时间顺序吧比赛的过程进行简单的流水账式记录" class="headerlink" title="下面按时间顺序吧比赛的过程进行简单的流水账式记录"></a>下面按时间顺序吧比赛的过程进行简单的流水账式记录</h2><ul><li><h4 id="2019年11月5日（3天前）-15：06"><a href="#2019年11月5日（3天前）-15：06" class="headerlink" title="2019年11月5日（3天前） 15：06"></a>2019年11月5日（3天前） 15：06</h4><p> 机器人打包寄快递发往筑波市啦，用的是黑猫家的jitbox，这么个铁栅栏里面随便装。</p><p><img src="https://user-images.githubusercontent.com/50350039/133566195-089c371c-7729-4e95-abce-7b5fdaa4547c.png"></p></li></ul><ul><li><h4 id="2019年11月7日（1天前）-22：04"><a href="#2019年11月7日（1天前）-22：04" class="headerlink" title="2019年11月7日（1天前） 22：04"></a>2019年11月7日（1天前） 22：04</h4><p>老师从研究室里的经费出钱给我们买了去往筑波夜行巴士的票，一张票9100日元，车上的绿茶随便喝。但是如下图，我们就这样坐了一宿的车，这样的座位9100日元稍微有点不值。</p><p><img src="https://user-images.githubusercontent.com/50350039/133566933-3f5559ff-408f-4ebd-b30c-86b14f378fc9.jpg"></p></li></ul><ul><li><h4 id="2019年11月8日（第1天）-06：11"><a href="#2019年11月8日（第1天）-06：11" class="headerlink" title="2019年11月8日（第1天） 06：11"></a>2019年11月8日（第1天） 06：11</h4><p>到达筑波市，这里是唯一一条公共交通，可以通往这里去往东京(新宿，秋叶原等)。</p><p><img src="https://user-images.githubusercontent.com/50350039/133567504-3b2765aa-17df-4f0f-8688-da841a080af5.png"></p></li></ul><ul><li><h4 id="2019年11月8日（第1天）-09：01"><a href="#2019年11月8日（第1天）-09：01" class="headerlink" title="2019年11月8日（第1天） 09：01"></a>2019年11月8日（第1天） 09：01</h4><p>之前寄的jitbox的物流终于送到啦，取货。</p><p><img src="https://user-images.githubusercontent.com/50350039/133567699-184a0f81-4b3a-4711-afe0-7257c86f532a.png"></p></li></ul><ul><li><h4 id="2019年11月8日（第1天）-10：11"><a href="#2019年11月8日（第1天）-10：11" class="headerlink" title="2019年11月8日（第1天） 10：11"></a>2019年11月8日（第1天） 10：11</h4><p>大会正式开始，一共66个队伍，每个队都有5-10个人。所以人数非常多。</p><p>会场在室外临时搭建，所以非常简陋，大家都坐在地上认真听比赛规则，安全事项等等。</p><p>绿油油的一片。嘎嘎嘎，，，，，</p><p><img src="https://user-images.githubusercontent.com/50350039/133568094-86f8a689-52b1-4192-9414-a44ad9057d19.png"></p></li></ul><p>   <img src="https://user-images.githubusercontent.com/50350039/133568153-9feefb27-e682-42e7-936b-4360d7ac4f6e.png"></p><p>   各个大学开始进行车检（检查车辆是否符合比赛要求，是否有违规设计，是否安全）</p><p>   <img src="https://user-images.githubusercontent.com/50350039/133568309-873ba927-c977-46c7-84f7-f65dee77f814.jpg"></p><ul><li><h4 id="2019年11月8日（第1天）11：50"><a href="#2019年11月8日（第1天）11：50" class="headerlink" title="2019年11月8日（第1天）11：50"></a>2019年11月8日（第1天）11：50</h4><p>再就是组装机器人，真的不得不吐糟，每一次搬运都要拆的七零八落，然后在一个个组装，很多处拧螺丝的角度都很恶心，比如Hokuyo的LRF要从底板网上拧，还Velodyne的支撑杆，用的是内嵌方螺母滑道的方杆，需要几个人配合把螺母移到位，才好拧。</p><p>以后会对以上不方便的地方进行改进。</p><p>如下图所示在本次比赛组装时候的图片找不到了，用一张中之岛时候的照片代替。</p></li></ul><p>​                    <img src="https://user-images.githubusercontent.com/50350039/133569505-83a3fa47-35ea-4816-bc21-1b3197e24ee6.png"></p><ul><li><h4 id="2019年11月8日（第1天）14：50"><a href="#2019年11月8日（第1天）14：50" class="headerlink" title="2019年11月8日（第1天）14：50"></a>2019年11月8日（第1天）14：50</h4><p>从start点出发，收集地图，start点有左右两处，正式比赛的时候随机从其中一处出发。</p><p>这里主要是利用Velodyne的3维16线激光雷达探测周围360度一圈，150m中上下共30度的若干点的距离。</p><p>最后形成一个点云图保存下来。从这里开始通过遥控手动控制小车走一遍全程，记录整个过程的各个传感器的数据。</p><p><img src="https://user-images.githubusercontent.com/50350039/133570336-f137078c-26c3-426c-8074-db7c2af8a747.png"></p></li></ul><p>​    </p><ul><li><h3 id="2019年11月8日（第1天）15：55"><a href="#2019年11月8日（第1天）15：55" class="headerlink" title="2019年11月8日（第1天）15：55"></a>2019年11月8日（第1天）15：55</h3><p>非常操蛋的，不知道硬盘之前被谁给塞满了。</p><p>收集数据过程中由于硬盘占满不能写入数据造成bag文件记录中断，</p><p>由于不清楚是何时开始中断的，尝试恢复不完整的bag文件。</p><p>尝试各种方法后任然恢复失败，已经记录的部分也不能提取出。</p><p>赶紧备份数据整理硬盘后，趁着结束前，录了一次从start到红绿灯处的数据。</p></li></ul><ul><li><h4 id="2019年11月8日（第1天）17：31"><a href="#2019年11月8日（第1天）17：31" class="headerlink" title="2019年11月8日（第1天）17：31"></a>2019年11月8日（第1天）17：31</h4><p>收拾行李回宾馆，讨论第二天策略。发现宾馆的电视机当显示器用非常合适。</p><p>我们带来的8寸小显示器真的把眼睛都看花了。</p><p><img src="https://user-images.githubusercontent.com/50350039/133570655-b161895b-beed-4866-ba65-10f1886d1ee7.png"></p></li></ul><ul><li><h4 id="2019年11月9日（第2天）08：13"><a href="#2019年11月9日（第2天）08：13" class="headerlink" title="2019年11月9日（第2天）08：13"></a>2019年11月9日（第2天）08：13</h4><p>宾馆提供的自助早饭真的好丰富。</p><p><img src="https://user-images.githubusercontent.com/50350039/133570795-a6927cc3-7526-4852-b055-0a6affb60771.png"></p></li></ul><ul><li><h4 id="2019年11月9日（第2天）10：00"><a href="#2019年11月9日（第2天）10：00" class="headerlink" title="2019年11月9日（第2天）10：00"></a>2019年11月9日（第2天）10：00</h4><p>第二天，也就是正式比赛前一天，明显来测试的队伍变多了，出发都需要排队一个个等了。其实实地测试开放好几个月呢，我们离得比较远只给了我们2天时间测试，很多东京本地的已经测试很多次了，不会像我们这样非常匆忙了。上午采集完地图数据后，中午吃饭时间放在那让他运行SLAM生成地图数据。顺便在goal点拍照假装成功到达终点。</p><p><img src="https://user-images.githubusercontent.com/50350039/133571298-8a0d783f-06eb-46bf-a8bf-3a2a826f9bd9.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133571378-5ce6fbb1-8c5a-48fb-8f6f-511dd2137031.png"></p></li></ul><p><img src="https://user-images.githubusercontent.com/50350039/133571424-76580e96-9012-48d5-bd19-ffaa37022563.png"></p><ul><li><h4 id="2019年11月9日（第2天）14：30"><a href="#2019年11月9日（第2天）14：30" class="headerlink" title="2019年11月9日（第2天）14：30"></a>2019年11月9日（第2天）14：30</h4><p>下午，终于把地图生成完了，实际花费时间大概需要行程时间的2倍。我们收集数据，绕场地跑了1圈花了1小时，SLAM和生成waypoint需要2小时左右。其实还有很大优化空间，时间原因准备不充分。在之后就是手动清理地图上的杂点，否则会被地图当成障碍物。大概近3点的时候，我们开始了第一次正式跑。</p><p>无人驾驶，第一次自动行走，一切很顺利，第一个绕圈也很顺利通过。</p><p><img src="https://user-images.githubusercontent.com/50350039/133571734-363d48ff-a646-445b-9d53-568f9646eba6.png"></p></li></ul><h4 id="直到。。。。直到这个地方，小车就一直卡住不前行。"><a href="#直到。。。。直到这个地方，小车就一直卡住不前行。" class="headerlink" title="直到。。。。直到这个地方，小车就一直卡住不前行。"></a>直到。。。。直到这个地方，小车就一直卡住不前行。</h4><p>​    <img src="https://user-images.githubusercontent.com/50350039/133571883-177b2cda-5f2b-4fcd-befe-407de6ec283b.png"></p><p>分析发现，是地图上的两个杂点导致以为这里有障碍物，死活绕不过去。</p><p><img src="https://user-images.githubusercontent.com/50350039/133571995-37ceb408-ca7e-43c3-940a-c413cf6127bb.png"></p><p>重新录制一份完整地图后，刚刚那个卡住的地方虽然通过了，但是从市役所广场去街道的地方会跑偏。</p><p>没时间多尝试，又采集了一份从start到红绿灯附近的地图后，当天的活动也结束得回去了</p><p>当天的晚餐是吃的宾馆旁边的回转寿司，我头一次见到我的同学（小潘）死命的往寿司上面放芥末，我也式了式，日本的芥末真是没话说。但是这个强度串的脑门，鼻涕眼泪一把留！！！！</p><p><img src="https://user-images.githubusercontent.com/50350039/133573170-8f20f21a-0643-4dc9-bd3a-b0f206314368.png"></p><ul><li><h4 id="2019年11月9日（第2天）19：23"><a href="#2019年11月9日（第2天）19：23" class="headerlink" title="2019年11月9日（第2天）19：23"></a>2019年11月9日（第2天）19：23</h4><p>回宾馆后，用电视机前回放当时的数据包发现，在屏幕上那两个杂点格外明显，小显示器真的不适合用来检查，修正地图。</p><p>仔细检查当天收集的地图，确保没有地图干净可用，毕竟只是收集了数据，没有多次实地跑，心里没底。只能尽可能保持数据完美了。</p><p><img src="https://user-images.githubusercontent.com/50350039/133573454-45f6e122-579a-40ab-95ea-4eee51ad005c.png"></p></li></ul><p>​    <img src="https://user-images.githubusercontent.com/50350039/133573721-d0b15070-666e-44ad-bd91-4f1775ae8439.png">    </p><p>讨论过程中发现一个非常严重的问题，就是我们输出的地图扭曲非常严重，就下面这张图，所有拐弯的地方实际应该全是直角，然而都没有成为直角。这个问题是以前没有的，没来这里前测试时生成的地图直角弯是很90度的。虽然更新电机编码器算法后，问题解决了，但是解释不了之前为什么没这个问题，突然出现这个问题。</p><p><img src="https://user-images.githubusercontent.com/50350039/133573926-c1040175-b376-4c15-8181-92e1b9b47604.png"></p><ul><li><h4 id="2019年11月10日（第3天）2：00"><a href="#2019年11月10日（第3天）2：00" class="headerlink" title="2019年11月10日（第3天）2：00"></a>2019年11月10日（第3天）2：00</h4><p>讨论着要不要偷偷摸摸去场地试验一下新做的地图，另外两个日本同学非常轴，死活不肯去。只能作罢。</p></li></ul><ul><li><h4 id="2019年11月10日（第3天）11：00"><a href="#2019年11月10日（第3天）11：00" class="headerlink" title="2019年11月10日（第3天）11：00"></a>2019年11月10日（第3天）11：00</h4><p>比赛正式开始，还有电视台的来采访，参赛队伍一个个排队等着出发，开始出发的时候还会被主持人问候，具体视频Youtube上应该也有记录。</p></li></ul><p>  <img src="https://user-images.githubusercontent.com/50350039/133574259-837f92a1-1634-40c7-88ff-63f9b7176840.png"></p><p>  <img src="https://user-images.githubusercontent.com/50350039/133574377-aa775e78-58dc-4b10-a225-fdc4a0a58c24.png"></p><p>  这个小车是群马大学的，后来是No.1，和队长交流了一下，收获很大。</p><p>  <img src="https://user-images.githubusercontent.com/50350039/133574499-1e4492c2-2ff9-41fa-a88e-79dc8fbfa3dc.png"></p><p> 中午是老师请我们吃的麦当劳</p><p>​    <img src="https://user-images.githubusercontent.com/50350039/133574624-cd7305cf-ca11-45e5-8b3d-e3c222b6da6d.png"></p><ul><li><h4 id="2019年11月10日（第3天）15：00"><a href="#2019年11月10日（第3天）15：00" class="headerlink" title="2019年11月10日（第3天）15：00"></a>2019年11月10日（第3天）15：00</h4><p>下午该我们出场了，前面的小车挂的早，我们一路畅通无阻。</p><p><img src="https://user-images.githubusercontent.com/50350039/133574780-163e8b7a-61d4-404c-b045-7254b8271b1e.png"></p><p>可惜任然死在前一天从市役所广场去大马路上的那个位置，虽然手动把waypoint向外侧移了很多，还是向内跑。</p></li></ul><ul><li><h4 id="2019年11月10日（第3天）19：00"><a href="#2019年11月10日（第3天）19：00" class="headerlink" title="2019年11月10日（第3天）19：00"></a>2019年11月10日（第3天）19：00</h4><p>主办方组织的参赛者晚宴，我们吃了好多，也和很多队伍进行了交流，唯一印象深刻的是，获得No.1的群马大学，他们是和企业合作开发的，没怎么使用开源代码，基本都是自己的算法。而且使用的激光雷达不是大家常用的3D而是4D的，也就是在生成的点云坐标上加上了反射率，也就是黑白照片和灰度照片的区别，更好的识别周围环境。具体算法是他们的秘密，估计是用了AI算法之类的。</p><p><img src="https://user-images.githubusercontent.com/50350039/133575045-9c1e2e29-0e32-4f59-8e7f-d74ea9f82e3d.png"></p></li></ul><p>​    <img src="https://user-images.githubusercontent.com/50350039/133575120-61b4920c-ab00-475b-80b0-7d0bd5cbf71e.png"></p><p><img src="https://user-images.githubusercontent.com/50350039/133575263-646fd986-22b5-4b82-840f-33f4bf046cf1.jpg"></p><ul><li><h4 id="2019年11月11日（第4天）白天"><a href="#2019年11月11日（第4天）白天" class="headerlink" title="2019年11月11日（第4天）白天"></a>2019年11月11日（第4天）白天</h4><p>前天晚上另外两个日本同学提前回去了，我和另一个中国同学负责今天把机器车寄回去，早上早早地预约了邮寄后，我们去东京玩了一圈。</p><p>我们先是去了秋叶原。</p><p><img src="https://user-images.githubusercontent.com/50350039/133575437-6de6269a-ea50-4c83-9e63-f47398c0cfa6.png"></p></li></ul><p>  <img src="https://user-images.githubusercontent.com/50350039/133575512-758567e7-9553-445b-bfb4-6455d8440548.png"></p><p>  <img src="https://user-images.githubusercontent.com/50350039/133575644-785ccb9a-5227-40e8-bfdf-f7d9e3fb8d8f.png"></p><p>​        <img src="https://user-images.githubusercontent.com/50350039/133575831-3969a673-1baf-4ff3-bb42-e339b5e53168.png"></p><ul><li><h4 id="最后回到筑波，把机器人寄回大阪，做巴士回家，回到家我的小猫咪已经迫不及待的等我，出去四天中间有叫同学来我家帮我家小可爱换换尿布，铲铲屎，加点粮食。看着埋怨的小眼神。此次比正式画上了句号。"><a href="#最后回到筑波，把机器人寄回大阪，做巴士回家，回到家我的小猫咪已经迫不及待的等我，出去四天中间有叫同学来我家帮我家小可爱换换尿布，铲铲屎，加点粮食。看着埋怨的小眼神。此次比正式画上了句号。" class="headerlink" title="最后回到筑波，把机器人寄回大阪，做巴士回家，回到家我的小猫咪已经迫不及待的等我，出去四天中间有叫同学来我家帮我家小可爱换换尿布，铲铲屎，加点粮食。看着埋怨的小眼神。此次比正式画上了句号。"></a>最后回到筑波，把机器人寄回大阪，做巴士回家，回到家我的小猫咪已经迫不及待的等我，出去四天中间有叫同学来我家帮我家小可爱换换尿布，铲铲屎，加点粮食。看着埋怨的小眼神。此次比正式画上了句号。</h4><p><img src="https://user-images.githubusercontent.com/50350039/133576454-ed96be7f-698c-46bb-a8b4-af1439195466.jpg"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++栈区和堆区</title>
      <link href="2019/01/01/c-zhan-qu-he-dui-qu/"/>
      <url>2019/01/01/c-zhan-qu-he-dui-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="C-栈区和堆区"><a href="#C-栈区和堆区" class="headerlink" title="C++栈区和堆区"></a>C++栈区和堆区</h1><h1 id="1-栈区"><a href="#1-栈区" class="headerlink" title="1.栈区"></a>1.栈区</h1><ul><li><h2 id="局部变量-存放在栈区，栈取的数据在函数执行完之后自动释放"><a href="#局部变量-存放在栈区，栈取的数据在函数执行完之后自动释放" class="headerlink" title="局部变量 存放在栈区，栈取的数据在函数执行完之后自动释放"></a>局部变量 存放在栈区，栈取的数据在函数执行完之后自动释放</h2></li><li><h2 id="栈区的数据由编译器管理开启和释放"><a href="#栈区的数据由编译器管理开启和释放" class="headerlink" title="栈区的数据由编译器管理开启和释放"></a>栈区的数据由编译器管理开启和释放</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int* func(int b)//形参也会存放在盏区{    b=100;int a = 10;return &amp;a;  //返回局部变量的地址}int main(){    //利用指针来接回函数的返回值    int *p = func(1)；    cout&lt;&lt;*p&lt;&lt;endl;  //输出10  第一次净额已打印正确的数据，是因为编译器做了保留    cout&lt;&lt;*p&lt;&lt;endl;  //乱码    第二次这个数据就不在保留了}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="2-堆区"><a href="#2-堆区" class="headerlink" title="2.堆区"></a>2.堆区</h1><ul><li><h2 id="由程序员分配释放，若程序员不释放内存，程序结束的时候有操作系统回收"><a href="#由程序员分配释放，若程序员不释放内存，程序结束的时候有操作系统回收" class="headerlink" title="由程序员分配释放，若程序员不释放内存，程序结束的时候有操作系统回收"></a>由程序员分配释放，若程序员不释放内存，程序结束的时候有操作系统回收</h2></li><li><h2 id="在C-中主要利用new在堆区开辟内存"><a href="#在C-中主要利用new在堆区开辟内存" class="headerlink" title="在C++中主要利用new在堆区开辟内存"></a>在C++中主要利用new在堆区开辟内存</h2></li><li><h2 id="堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete"><a href="#堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete" class="headerlink" title="堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete"></a>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int* func(){    //利用new关键字 可以将数据开辟到遁去    //指针本质也是局部变量，放在盏上，指针保存的数据是放在了堆区    int* p = new int(10);    return p;      }int main(){    //在堆区开皮数据    int *p = func();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//1.new的基本语法int* func(){//在堆区创建整形数据    //new返回是  该数据类型的指针    int* p = new int(10);    return p;}void test01(){    int* p = func();    count&lt;&lt; *p &lt;&lt;endl;    count&lt;&lt; *p &lt;&lt;endl;    count&lt;&lt; *p &lt;&lt;endl;    //堆区的数据 由程序员管理开辟，程序员管理释放    //如果想释放堆区的数据，利用关键字 delete        delete p;//把数据的地址释放干净        count&lt;&lt; *p &lt;&lt;endl;//报错 error}//2 堆区开辟一个数组void test01(){    //创建10整形数据的数组，在堆区   int* arr = new int[10];//10代表数组有10个元素        for(int i=0;i&lt;10;i++)    {        arr[i] = i + 10；    }        for(int i=0;i&lt;10;i++）    {cout&lt;&lt; arr[i]&lt;&lt;endl;    }               //释放堆区数组     //释放数组的时候，要加[]才可以             delete[] arr;        }int main(){test 01()；    test 02()；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
